import pandas as pd
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.linear_model import LinearRegression
# 分类特征和数值特征列表
categorical_features = ['Direction', 'District', 'Elevator', 'Layout', 'Region', 'Renovation']
num_features = ['Size', 'Year']
# 加载或定义训练好的模型、编码器和标准化器
# encoder = OneHotEncoder()  # 已训练好的编码器
# scaler = StandardScaler()  # 已训练好的标准化器
# model = LinearRegression()  # 已训练好的线性回归模型

def predict_price(input_data):
    # 将用户输入的数据转换为DataFrame
    input_df = pd.DataFrame([input_data])

    # 对分类特征进行独热编码
    encoded_input = encoder.transform(input_df[categorical_features])
    encoded_input_df = pd.DataFrame(encoded_input, columns=encoder.get_feature_names_out())

    # 合并编码后的数据和原始DataFrame
    input_df = pd.concat([input_df.reset_index(drop=True), encoded_input_df], axis=1)

    # 删除原始的分类特征列
    input_df.drop(columns=categorical_features, inplace=True)

    # 标准化数值特征
    input_df[num_features] = scaler.transform(input_df[num_features])

    # 使用训练好的模型预测房价
    return model.predict(input_df)[0]

# 示例用户输入数据
input_data = {
    'Direction': '南北',
    'District': '东单',
    'Elevator': '无电梯',
    'Floor': '6',
    'Layout': '2室1厅',
    'Region': '东城',
    'Renovation': '精装',
    'Size': 60,
    'Year': 1988
}


数据导出模块常用方法


                                                                   1. to_csv：导出为CSV文件


import pandas as pd

# 创建一个DataFrame
data = {
    'Name': ['Alice', 'Bob', 'Charlie'],
    'Age': [25, 30, 35],
    'City': ['New York', 'Los Angeles', 'Chicago']
}
df = pd.DataFrame(data)

# 导出为CSV文件
df.to_csv('output.csv', index=False)

predicted_price = predict_price(input_data)
print(f"The predicted price for the input data is: {predicted_price}")

举例：
# Test Case 1: Basic CSV export
df1 = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})
df1.to_csv('output1.csv', index=False)

# Test Case 2: Export with index
df2 = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})
df2.to_csv('output2.csv', index=True)

# Test Case 3: Export with a different delimiter
df3 = pd.DataFrame({'A': [10, 20, 30], 'B': [40, 50, 60]})
df3.to_csv('output3.csv', sep=';', index=False)


                                                            2. to_excel：导出为Excel文件

import pandas as pd

# 创建一个DataFrame
data = {
    'Name': ['Alice', 'Bob', 'Charlie'],
    'Age': [25, 30, 35],
    'City': ['New York', 'Los Angeles', 'Chicago']
}
df = pd.DataFrame(data)

# 导出为Excel文件
df.to_excel('output.xlsx', index=False)

举例：
# Test Case 1: Basic Excel export
df1 = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})
df1.to_excel('output1.xlsx', index=False)

# Test Case 2: Export with index
df2 = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})
df2.to_excel('output2.xlsx', index=True)

# Test Case 3: Export to a specific sheet
df3 = pd.DataFrame({'A': [10, 20, 30], 'B': [40, 50, 60]})
df3.to_excel('output3.xlsx', sheet_name='Sheet1', index=False)


                                                             3. to_json：导出为JSON文件

import pandas as pd

# 创建一个DataFrame
data = {
    'Name': ['Alice', 'Bob', 'Charlie'],
    'Age': [25, 30, 35],
    'City': ['New York', 'Los Angeles', 'Chicago']
}
df = pd.DataFrame(data)

# 导出为JSON文件
df.to_json('output.json', orient='records')

举例：


# Test Case 1: Basic JSON export
df1 = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})
df1.to_json('output1.json', orient='records')

# Test Case 2: Export with different orientation
df2 = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})
df2.to_json('output2.json', orient='split')

# Test Case 3: Export with index
df3 = pd.DataFrame({'A': [10, 20, 30], 'B': [40, 50, 60]})
df3.to_json('output3.json', orient='index')



                                                            4. to_sql：导出到SQL数据库


import pandas as pd
from sqlalchemy import create_engine

# 创建一个DataFrame
data = {
    'Name': ['Alice', 'Bob', 'Charlie'],
    'Age': [25, 30, 35],
    'City': ['New York', 'Los Angeles', 'Chicago']
}
df = pd.DataFrame(data)

# 创建数据库连接
engine = create_engine('sqlite:///example.db')

# 导出到SQL数据库
df.to_sql('users', con=engine, if_exists='replace', index=False)



举例：




# Test Case 1: Basic SQL export
df1 = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})
df1.to_sql('table1', con=engine, if_exists='replace', index=False)

# Test Case 2: Export with index
df2 = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})
df2.to_sql('table2', con=engine, if_exists='replace', index=True)

# Test Case 3: Append data to an existing table
df3 = pd.DataFrame({'A': [10, 20, 30], 'B': [40, 50, 60]})
df3.to_sql('table1', con=engine, if_exists='append', index=False)
                                                          5. to_dict：导出为字典



import pandas as pd

# 创建一个DataFrame
data = {
    'Name': ['Alice', 'Bob', 'Charlie'],
    'Age': [25, 30, 35],
    'City': ['New York', 'Los Angeles', 'Chicago']
}
df = pd.DataFrame(data)

# 导出为字典
data_dict = df.to_dict(orient='records')
print(data_dict)



举例：
# Test Case 1: Basic dict export
df1 = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})
dict1 = df1.to_dict(orient='records')

# Test Case 2: Export with different orientation
df2 = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})
dict2 = df2.to_dict(orient='list')

# Test Case 3: Export with index
df3 = pd.DataFrame({'A': [10, 20, 30], 'B': [40, 50, 60]})
dict3 = df3.to_dict(orient='index')
